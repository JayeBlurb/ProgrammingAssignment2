a <- available.packages()
a <- available.packages()
head(rownames(a), 3)
install.packages("KernSmooth")
library(KernSmooth)
x<-list(2, "a", "b", TRUE)
x[1]
x[[1]]
rm(x)
x<-1:4
y<-2:3
x+y
z<-4
[z]
z[1]
rm(x,y,z)
x<-c(3,5,5,7)
rm(x)
x<-c(17, 14, 4, 5, 13, 12, 10)
x[==4]>10
x[x==4]>10
x[x>10]<-4
rm(x)
x<-c(17, 14, 4, 5, 13, 12, 10)
x[x>10]==4
x[x>=11]<-4
R.version.string
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2
Z*2+100
z * 2 + 100
my_sqrt<-sqrt(z - 1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
play()
?file.path
nxt()
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
library("Swirl")
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10 length=30)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect<-c(0.5, 55, -10, 6)
tf<-num_vect < 1
tf
num_vect >= 6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char, "Jingwen")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep=" ")
paste(c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data<-sample(c(y, z), 100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3), c(5), c(7)]
c(x[3], x[5], x[7])
x[c(x[3], x[5], x[7])]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect<-c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
matrix(1:20, 4 5)
matrix(1:20, 4, 5)
my_matrix2<-matrix(1:20, 4, 5)
indentical(my_matrix, my_matrix2)
identical(my_matrix, my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
add2 <- function(x, y) {
x + y
}
add2(2, 5)
above <- function(x, n){
use <- x > n
x[use]
}
x < - 1:20
x<-1:20
above(x 12)
above(x, 12)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
x<-1:10
if(x>5){}
if(x>5){x<-0}
library(swirl)
swirl()
==
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5 = 7
5 == 7 != true
5 =7 != TRUE
5 != 7
5 !== 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,
| FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
0
ints <- sample(10)
ints
ints > 5
ints > 7
which(ints > 7)
any(ints < 0)
all (ints > 0)
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Hello", "there!")
submit()
mad_libs("Downtown", "quickly", "store")
submit()
submit()
'I %p% love %p% R'
"I" %p% "love" %p% "R"
'I' %p% 'love' %p% 'R'
"I" "%p%" "love" "%p%" "R"
"I"%p%"love"%p%"R"
info()
'I%p%love%p%R'
'I'%p%'love'%p%'R'
'I'%p%'love'%p%'R!'
library(swirl)
swirl()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%m")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
0
bye()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lappy(flags$flag_colors, sum)
lapply(flags$flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
FUN(X[[1]])
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean
)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
bye()
?lapply
?runif
?rowSums
x <- c(norm(10), runif(10), rnorm(10, 1))
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
?gl
?invisible
library(datasets)
data("iris")
apply(iris[, 1:4], 2, mean)
data(mtcars)
sapply(split(mtcars#mgp, mtcar$cyl), mean)
+0
>
sapply(split(mtcars#mgp, mtcar$cyl), mean)
, 1)
library(datasets)
data("mtcars")
tapply(mtcar@cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcar$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
?mtcars
sapply(split(mtcars$hp, mtcars$cyl), mean)
c(1,0,5,2,1,6,3,4,0)
matrix(c(1,0,5,2,1,6,3,4,0), nrow=3, ncol=3)
?det
det(matrix(c(1,0,5,2,1,6,3,4,0))
det(matrix(c(1,0,5,2,1,6,3,4,0))
1+1
det(matrix(c(1,0,5,2,1,6,3,4,0), nrow=3, ncol=3))
det(matrix(c(1,0,5,2,1,6,3,4,5), nrow=3, ncol=3))
x <- matrix(c(1,0,5,2,1,6,3,4,5), nrow=3, ncol=3)
x
solve(x)
x * solve(x)
x * (1/solve(x))
round(x %*% solve(x), 1)
y <- matrix(1:10, nrow = 2, ncol = 5)
det(y)
solve(y)
?matrix
getwd()
setwd("datasciencecoursera/ProgrammingAssignment2")
setwd("datasciencecoursera\ProgrammingAssignment2")
setwd(datasciencecoursera\ProgrammingAssignment2)
setwd("~\datasciencecoursera\ProgrammingAssignment2")
setwd("C:\Users\JYu14\datasciencecoursera\ProgrammingAssignment2")
getwd()
setwd("~/datasciencecoursera/ProgrammingAssignment2")
setwd("/datasciencecoursera/ProgrammingAssignment2")
setwd("datasciencecoursera/ProgrammingAssignment2")
setwd("datasciencecoursera")
setwd("C:/Users/JYu14/datasciencesoursera")
setwd("desktop")
setwd(C:/Users/JYu14/Desktop)
setwd("C:/Users/JYu14/Desktop")
getwd()
setwd("C:/Users/JYu14/datasciencecoursera")
getwd()
setwd("C:/Users/JYu14/datasciencecoursera/ProgrammingAssignment2")
getwd()
source(cahematrix.R)
source("cachematrix.R")
makeCacheMatrix(x)
x$get()
makeCacheMatrix(Matrix(x, nrol=3, ncol=3))
thatCasheMatrix <- makeCacheMatrix(Matrix(x, nrol=3, ncol=3))
thatCasheMatrix$get()
thatCasheMatrix$setinverse()
x
thatCasheMatrix(x)
thatCasheMatrix <- makeCacheMatrix(x)
thatCasheMatrix$get()
thatCasheMatrix$setinverse()
thatCasheMatrix$setinverse(x)
thatCasheMatrix$getinverse(x)
thatCasheMatrix$getinverse()
thatCasheMatrix$get()
showInverse <- thatCasheMatrix$setinverse(x)
showInverse
source("cachematrix.R")
avector <- makeVector(1:4)
avector$getmean()
avector$setmean()
showmean <- avector$setmean(1:4)
showmean
source("cachematrix.R")
thatCasheMatrix <- makeCacheMatrix(Matrix(x, nrol=3, ncol=3))
thatCasheMatrix <- makeCahseMatrix(x)
thatCasheMatrix <- makeCacheMatrix(x)
cacheSolve(thatCasheMatrix)
source("cachematrix.R")
thatCasheMatrix <- makeCahseMatrix(x)
thatCasheMatrix <- makeCacheMatrix(x)
cacheSolve(thatCasheMatrix)
round(x, %*% thatCasheMatrix, 1)
round(x %*% thatCasheMatrix, 1)
x
round(x %*% solve(x), 1)
round(x %*% invserseMatrix, 1)
anotherMatrix <- makeCacheMatrix(4)
cacheSolve(anotherMatrix)
z <- matrix(1:10, nrow=2, ncol=10)
anotherMatrix <- makeCacheMatrix(z)
cacheSolve(anotherMatrix)
?matrix
anotherMatrix$getinverse()
thatCasheMatrix$getinverse()
cacheSolve(anotherMatrix)
cacheSolve(thatCasheMatrix)
thatCasheMatrix$getinverse()
avector$getmean()
chachemean(avector)
cachemean(avector)
newvector <- makeVector(1:10)
cachemean(newvector)
newvector$getmean()
source("cachematrix.R")
source("cachematrix.R")
squareMatrix <- matrix(c(1:9), nrol=3, ncol=3)
squareMatrix <- matrix(c(1:9), nrol=3, ncol=3))
matrix(1:9, nrol=3, ncol=3)
squareMatrix <- matrix(c(1:9), nrol = 3, ncol = 3)
squareMatrix <- matrix(C(1:9), nrow = 3, ncol = 3)
c(1:9)
squareMatrix <- matrix(1:9, nrow = 3, ncol = 3)
squareMatrix
det(squareMatrix)
squareMatrix <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
det(squareMatrix)
solve(squareMatrix)
squareMatrix <- matrix(c(1,3,4,7,5,4,1,2,3), nrow = 3, ncol = 3)
det(squareMatrix)
solve(squareMatrix)
thatcachematrix <- makeCacheMatrix(squareMatrix)
cacheSolve(thatcachematrix)
source("cachematrix.R")
thatcachematrix <- makeCacheMatrix(squareMatrix)
cacheSolve(thatcachematrix)
thatcachematrix$getinverse()
thatcachematrix$getinverse()
cacheSolve(thatcachematrix)
thatcachematrix$setinverse(solve(thatcachematrix$get()))
thatcachematrix$getinverse()
solve(squareMatrix)
source("cachematrix.R")
source("cachematrix.R")
squareMatrix <- matrix(c(1,3,4,7,5,4,1,2,3), nrow = 3, ncol = 3)
thatcachematrix <- makeCacheMatrix(squareMatrix)
cacheSolve(thatcachematrix)
thatcachematrix$getinverse()
